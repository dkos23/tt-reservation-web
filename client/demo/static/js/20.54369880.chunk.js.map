{"version":3,"sources":["admin/SubmitButtons.js","admin/CourtConfigForm.module.css","admin/GeneralSettingsPage.module.css","admin/AnnouncementForm.js","admin/CourtConfigForm.js","admin/SystemConfigForm.js","admin/GeneralSettingsPage.js"],"names":["SubmitButtonsState","apiState","success","loading","error","text","SubmitButtons","disableReset","onSave","onReset","gutter","align","disabled","onClick","type","htmlType","module","exports","AnnouncementForm","useContext","appContext","announcement","config","setConfig","useState","enabled","setEnabled","setDisableReset","useApi","patchConfigApi","state","patchConfig","Form","useForm","form","resetForm","useCallback","resetFields","useEffect","handleEnabledChange","e","target","checked","handleFieldsChange","handleSave","layout","onFinish","onFieldsChange","Item","name","label","onChange","initialValue","TextArea","CourtConfigForm","courts","setCourts","putCourtsApi","putCourts","initialValues","useMemo","getNextId","curCourts","getFieldValue","maxId","c","Math","max","courtId","Modal","confirm","title","icon","ExclamationCircleOutlined","centered","content","okText","okType","cancelText","onOk","autoComplete","List","fields","add","remove","move","map","field","i","className","styles","court","key","fieldKey","bordered","courtIdInput","rules","required","message","placeholder","CaretUpOutlined","CaretDownOutlined","danger","DeleteOutlined","block","PlusOutlined","sliderMarks","Array","from","reduce","marks","_","SystemConfigForm","values","href","rel","validator","value","isTimeZoneValid","Promise","resolve","reject","min","range","GeneralSettingsPage","wrapper","Text"],"mappings":"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","file":"static/js/20.54369880.chunk.js","sourcesContent":["import { Button, Col, Row } from 'antd';\n\nimport { StatusText } from './StatusText';\n\nfunction SubmitButtonsState({ apiState }) {\n    const { success, loading, error } = apiState;\n\n    if (loading)\n        return (\n            <StatusText\n                loading\n                text=\"Speichern...\"\n            />\n        );\n\n    if (error)\n        return (\n            <StatusText\n                error\n                text=\"Konnte nicht gespeichert werden\"\n            />\n        );\n\n    if (success)\n        return (\n            <StatusText\n                success\n                text=\"Gespeichert\"\n            />\n        );\n\n    return null;\n}\n\nexport function SubmitButtons({\n    apiState = {},\n    disableReset,\n    onSave,\n    onReset,\n}) {\n    return (\n        <Row gutter={[16, 16]} align=\"middle\">\n            <Col>\n                <Button \n                    disabled={apiState.loading}\n                    onClick={onSave}\n                    type=\"primary\" \n                    htmlType=\"submit\"\n                >\n                    Speichern\n                </Button>\n            </Col>\n            <Col>\n                <Button \n                    disabled={apiState.loading || disableReset}\n                    onClick={onReset}\n                    htmlType=\"reset\"\n                >\n                    Zur√ºcksetzen\n                </Button>\n            </Col>\n            <Col>\n                <SubmitButtonsState apiState={apiState} />\n            </Col>\n        </Row>\n    );\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"court\":\"CourtConfigForm_court__1U5H_\",\"courtIdInput\":\"CourtConfigForm_courtIdInput__26kkp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"GeneralSettingsPage_wrapper__2CalC\"};","import { Checkbox, Form, Input } from 'antd';\nimport React, { useCallback, useContext, useEffect, useState } from 'react';\n\nimport { SubmitButtons } from './SubmitButtons';\nimport { appContext } from '../AppContext';\nimport { patchConfigApi } from '../api';\nimport { useApi } from '../useApi';\n\nexport function AnnouncementForm() {\n\n    const { config: { announcement }, setConfig } = useContext(appContext);\n    const [enabled, setEnabled] = useState();\n    const [disableReset, setDisableReset] = useState(true);\n    const [state, patchConfig] = useApi(patchConfigApi, setConfig);\n\n    const [form] = Form.useForm();\n\n    const resetForm = useCallback(announcement => {\n        form.resetFields()\n        setEnabled(!!announcement);\n        setDisableReset(true);\n    }, [form]);\n\n    useEffect(() => {\n        resetForm(announcement);\n    }, [resetForm, announcement]);\n\n    const handleEnabledChange = useCallback(e => {\n        setEnabled(e.target.checked);\n    }, []);\n\n    const handleFieldsChange = useCallback(() => {\n        if (disableReset)\n            setDisableReset(false);\n    }, [disableReset]);\n\n    const handleSave = useCallback(({ announcement }) => {\n        patchConfig(null, {\n            announcement: enabled ? announcement : '',\n        }, () => resetForm(enabled && announcement));\n    }, [enabled, patchConfig, resetForm]);\n\n    return (\n        <Form\n            form={form}\n            layout=\"vertical\"\n            onFinish={handleSave}\n            onFieldsChange={handleFieldsChange}\n        >\n            <Form.Item\n                name=\"announcement\"\n                label={\n                    <Checkbox\n                        checked={enabled}\n                        onChange={handleEnabledChange}\n                    >\n                        Ank√ºndigung ver√∂ffentlichen\n                    </Checkbox>\n                }\n                initialValue={announcement}\n            >\n                <Input.TextArea\n                    disabled={!enabled}\n                />\n            </Form.Item>\n\n            <Form.Item>\n                <SubmitButtons\n                    apiState={state}\n                    disableReset={disableReset}\n                    onReset={resetForm}\n                />\n            </Form.Item>\n        </Form>\n    );\n}","import { Button, Form, Input, Modal, Space } from 'antd';\nimport { CaretDownOutlined, CaretUpOutlined, DeleteOutlined, ExclamationCircleOutlined, PlusOutlined } from '@ant-design/icons';\nimport React, { useCallback, useContext, useEffect, useMemo, useState } from 'react';\n\nimport { SubmitButtons } from './SubmitButtons';\nimport { appContext } from '../AppContext';\nimport { putCourtsApi } from '../api';\nimport styles from './CourtConfigForm.module.css';\nimport { useApi } from '../useApi';\n\nexport function CourtConfigForm() {\n\n    const { courts, setCourts } = useContext(appContext);\n    const [disableReset, setDisableReset] = useState(true);\n    const [state, putCourts] = useApi(putCourtsApi, setCourts);\n\n    const [form] = Form.useForm();\n\n    const initialValues = useMemo(() => ({ courts }), [courts]);\n\n    const resetForm = useCallback(() => {\n        form.resetFields();\n        setDisableReset(true);\n    }, [form]);\n\n    useEffect(() => {\n        form.resetFields();\n    }, [form, courts]);\n\n    const getNextId = useCallback(() => {\n        const curCourts = form.getFieldValue('courts') || [];\n        let maxId = 0;\n        for (let c of [...courts, ...curCourts])\n            maxId = Math.max(c.courtId, maxId);\n        return maxId + 1;\n    }, [courts, form]);\n\n    const handleFieldsChange = useCallback(() => {\n        if (disableReset)\n            setDisableReset(false);\n    }, [disableReset]);\n\n    const handleSave = useCallback(({ courts }) => {\n        Modal.confirm({\n            title: 'Achtung!',\n            icon: <ExclamationCircleOutlined />,\n            centered: true,\n            content: (\n                <div>\n                    <p>Durch das √Ñndern von Pl√§tzen k√∂nnen bestehende Reservierungen verloren gehen.</p>\n                    <p>Alle Reservierungen, die im Zeitraum einer Sperrung liegen, werden automatisch storniert.</p>\n                    <p>Dies gilt auch f√ºr das Entfernen eines Platzes.</p>\n                    <p>Alle Nutzer, die von einer Stornierung betroffen sind, werden per E-Mail informiert.</p>\n                </div>\n            ),\n            okText: 'Best√§tigen',\n            okType: 'danger',\n            cancelText: 'Abbrechen',\n            onOk() {\n                putCourts(null, courts, resetForm);\n            },\n        });\n    }, [putCourts, resetForm]);\n\n    return (\n        <Form\n            autoComplete=\"off\"\n            form={form}\n            initialValues={initialValues}\n            layout=\"vertical\"\n            onFieldsChange={handleFieldsChange}\n            onFinish={handleSave}\n        >\n            <Form.List name=\"courts\">\n                {(fields, { add, remove, move }) => (\n                    <>\n                        {fields.map((field, i) => (\n                            <div key={field.key} className={styles.court}>\n                                <Space>\n                                    <Form.Item\n                                        {...field}\n                                        key=\"courtId\"\n                                        label=\"ID\"\n                                        name={[field.name, 'courtId']}\n                                        // name={'courtId'}\n                                        fieldKey={[field.fieldKey, 'courtId']}\n                                    >\n                                        <Input\n                                            disabled\n                                            bordered={false}\n                                            className={styles.courtIdInput}\n                                        />\n                                    </Form.Item>\n\n                                    <Form.Item\n                                        {...field}\n                                        key=\"name\"\n                                        label=\"Name\"\n                                        name={[field.name, 'name']}\n                                        fieldKey={[field.fieldKey, 'name']}\n                                        rules={[{ required: true, message: 'Name erforderlich' }]}\n                                    >\n                                        <Input placeholder=\"z.B.: Platz 1\" />\n                                    </Form.Item>\n\n                                    <Form.Item\n                                        label=\"Aktionen\"\n                                    >\n                                        <Space>\n                                            <Button\n                                                onClick={() => move(i, i - 1)}\n                                                icon={<CaretUpOutlined />}\n                                            />\n                                            <Button\n                                                onClick={() => move(i, i + 1)}\n                                                icon={<CaretDownOutlined />}\n                                            />\n                                            <Button\n                                                onClick={() => remove(field.name)}\n                                                danger\n                                                icon={<DeleteOutlined />}\n                                            />\n                                        </Space>\n                                    </Form.Item>\n                                </Space>\n                            </div>\n                        ))}\n\n                        <Form.Item key=\"add\">\n                            <Button\n                                type=\"dashed\"\n                                onClick={() => add({ courtId: getNextId() })}\n                                block\n                                icon={<PlusOutlined />}\n                            >\n                                Platz anlegen\n                            </Button>\n                        </Form.Item>\n                    </>\n                )}\n            </Form.List>\n\n            <Form.Item>\n                <SubmitButtons\n                    apiState={state}\n                    disableReset={disableReset}\n                    onReset={resetForm}\n                />\n            </Form.Item>\n        </Form>\n    );\n}","import { Form, Input, InputNumber, Slider } from 'antd';\nimport React, { useCallback, useContext, useEffect, useState } from 'react';\n\nimport { SubmitButtons } from './SubmitButtons';\nimport { appContext } from '../AppContext';\nimport { isTimeZoneValid } from '../helper';\nimport { patchConfigApi } from '../api';\nimport { useApi } from '../useApi';\n\nconst TIMEZONE_LIST_LINK = 'https://en.wikipedia.org/wiki/List_of_tz_database_time_zones';\n\nconst sliderMarks = Array.from(Array(25)).reduce((marks, _, i) => {\n    marks[i] = i % 24; \n    return marks;\n}, {})\n\nexport function SystemConfigForm() {\n\n    const { config, setConfig } = useContext(appContext);\n    const [disableReset, setDisableReset] = useState(true);\n    const [state, patchConfig] = useApi(patchConfigApi, setConfig);\n\n    const [form] = Form.useForm();\n\n    const resetForm = useCallback(() => {\n        form.resetFields();\n        setDisableReset(true);\n    }, [form]);\n\n    useEffect(() => {\n        resetForm();\n    }, [config, resetForm]);\n\n    const handleFieldsChange = useCallback(() => {\n        if (disableReset)\n            setDisableReset(false);\n    }, [disableReset]);\n\n    const handleSave = useCallback(values => {\n        patchConfig(null, values, resetForm);\n    }, [patchConfig, resetForm]);\n\n    return (\n        <Form\n            form={form}\n            layout=\"vertical\"\n            initialValues={config}\n            onFinish={handleSave}\n            onFieldsChange={handleFieldsChange}\n        >\n            <Form.Item\n                name=\"url\"\n                label=\"URL des Reservierungssystems\"\n                rules={[{ required: true, message: 'URL ist erforderlich' }]}\n            >\n                <Input />\n            </Form.Item>\n\n            <Form.Item\n                name=\"orgName\"\n                label=\"Vereinsname\"\n                rules={[{ required: true, message: 'Vereinsname ist erforderlich' }]}\n            >\n                <Input />\n            </Form.Item>\n\n            <Form.Item\n                name=\"timeZone\"\n                label={<span>Zeitzone (<a href={TIMEZONE_LIST_LINK} target=\"_blank\" rel=\"noreferrer\">IANA TZ name</a>)</span>}\n                rules={[\n                    { required: true, message: 'Zeitzone ist erforderlich' },\n                    { \n                        validator(_, value) {\n                            if (!isTimeZoneValid(value))\n                                return Promise.reject('Zeitzone ung√ºltig');\n                            return Promise.resolve();\n                        }\n                    }\n                ]}\n            >\n                <Input />\n            </Form.Item>\n\n            <Form.Item\n                name=\"serverMail\"\n                label=\"E-Mail Adresse, die zum Senden benutzt wird\"\n                rules={[\n                    { type: 'email', message: 'Beispiel: mustermann@web.de' },\n                    { required: true, message: 'E-Mail Adresse ist erforderlich' },\n                ]}\n            >\n                <Input />\n            </Form.Item>\n\n            <Form.Item\n                name=\"reservationDaysInAdvance\"\n                label=\"Anzahl der Tage, die Pl√§tze im voraus reservierbar sind\"\n                rules={[{ required: true, message: 'Angabe ist erforderlich' }]}\n            >\n                <InputNumber \n                    min={1}\n                    max={1825}\n                />\n            </Form.Item>\n\n            <Form.Item\n                name=\"reservationMaxActiveCount\"\n                label=\"Maximale Anzahl an offenen Reservierungen, die ein Nutzer t√§tigen darf\"\n                rules={[{ required: true, message: 'Angabe ist erforderlich' }]}\n            >\n                <InputNumber \n                    min={1}\n                />\n            </Form.Item>\n\n            <Form.Item\n                name=\"visibleHours\"\n                label=\"Angezeigte Uhrzeiten im Kalender\"\n                rules={[{ required: true, message: 'Angabe ist erforderlich' }]}\n            >\n                <Slider \n                    marks={sliderMarks}\n                    range\n                    min={0}\n                    max={24}\n                />\n            </Form.Item>\n\n            <Form.Item>\n                <SubmitButtons\n                    apiState={state}\n                    disableReset={disableReset}\n                    onReset={resetForm}\n                />\n            </Form.Item>\n        </Form>\n    );\n}","import { Divider, Typography } from 'antd';\n\nimport { AnnouncementForm } from './AnnouncementForm';\nimport { CourtConfigForm } from './CourtConfigForm';\nimport React from 'react';\nimport { SystemConfigForm } from './SystemConfigForm';\nimport styles from './GeneralSettingsPage.module.css';\n\nexport function GeneralSettingsPage() {\n\n    return (\n        <div className={styles.wrapper}>\n\n            <h1>Ank√ºndigung</h1>\n            <AnnouncementForm />\n\n            <Divider />\n\n            <h1>Platzverwaltung</h1>\n            <Typography.Text>\n                Die Reihenfolge gibt die Darstellung im Reservierungskalender vor.\n            </Typography.Text>\n            <br/><br/>\n            <CourtConfigForm />\n\n            <Divider />\n\n            <h1>Basiseinstellungen</h1>\n            <SystemConfigForm />\n\n        </div>\n    );\n}"],"sourceRoot":""}