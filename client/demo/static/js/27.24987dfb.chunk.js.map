{"version":3,"sources":["../node_modules/@ant-design/icons-svg/es/asn/ExperimentOutlined.js","../node_modules/@ant-design/icons/es/icons/ExperimentOutlined.js","demo/DemoControls.js","demo/mockDatabase.js","demo/mockApi.js"],"names":["ExperimentOutlined","props","ref","React","AntdIcon","Object","assign","icon","ExperimentOutlinedSvg","displayName","demoControl","DemoControls","useContext","authContext","user","setUser","useState","open","setOpen","useApi","postLoginApi","login","history","useHistory","location","useLocation","useEffect","notification","info","key","message","duration","placement","onClose","description","direction","pathname","size","onClick","push","userId","type","mail","password","close","style","position","bottom","right","today","dayjs","startOf","db","config","announcement","visibleHours","orgName","serverMail","url","reservationDaysInAdvance","reservationMaxActiveCount","timeZone","tz","guess","mailTemplates","reservationConfirmation","subject","body","reservationCancelled","confirmMail","resetPassword","templates","reservationTos","systemTos","infoPage","legalPrivacy","courts","courtId","name","users","verified","admin","registeredAt","reservations","id","from","add","hour","to","groupId","created","reservationGroups","text","RESERVATION_TYPES","DISABLE","NORMAL","window","getFakeDb","addFakeReservation","fakeDelay","ms","Promise","resolve","setTimeout","cn","u","method","di","indexOf","slice","handleRequests","options","a","JSON","parse","queryIndex","cleanUrl","params","parseQuery","lastSlashIndex","lastIndexOf","firstUrlPart","lastUrlPart","authUserId","headers","split","parseInt","tryStrings","s","getBaseDataApi","patchConfigApi","putCourtsApi","getMailTemplatesApi","putMailTemplateApi","putTemplateApi","getUsersApi","patchUserApi","postRegisterApi","postLogoutApi","deleteUserApi","postSendVerifyMailApi","postVerifyMailApi","getReservationsApi","patchReservationGroupApi","postReservationGroupApi","success","map","upcomingReservationCount","totalReservationCount","lastActivity","some","__status","json","newUser","Math","floor","random","Number","MAX_SAFE_INTEGER","token","find","filter","verifyToken","btoa","warn","atob","start","end","forEach","r","check","isSameOrBefore","isSameOrAfter","checkDate","g","gId","uId","undefined","isNaN","e","reduce","nextId","max","length","group","acc","groupReservations","rest","found","isSame","keepReservations","newReservations","maxDate","allFound","r2","reservationOverlap","conflicts","unavailableReservations","isAfter","isBefore","disabled","normal","k","n","updatedReservations","userGroupIds","resCount","includes","value","byteLen","x","str","stringify","m","encodeURIComponent","match","patchFetch","_fetch","fetch","res","console","log","error","request","response","totalKb","ok","status"],"mappings":"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","file":"static/js/27.24987dfb.chunk.js","sourcesContent":["// This icon file is generated automatically.\nvar ExperimentOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M512 472a40 40 0 1080 0 40 40 0 10-80 0zm367 352.9L696.3 352V178H768v-68H256v68h71.7v174L145 824.9c-2.8 7.4-4.3 15.2-4.3 23.1 0 35.3 28.7 64 64 64h614.6c7.9 0 15.7-1.5 23.1-4.3 33-12.7 49.4-49.8 36.6-82.8zM395.7 364.7V180h232.6v184.7L719.2 600c-20.7-5.3-42.1-8-63.9-8-61.2 0-119.2 21.5-165.3 60a188.78 188.78 0 01-121.3 43.9c-32.7 0-64.1-8.3-91.8-23.7l118.8-307.5zM210.5 844l41.7-107.8c35.7 18.1 75.4 27.8 116.6 27.8 61.2 0 119.2-21.5 165.3-60 33.9-28.2 76.3-43.9 121.3-43.9 35 0 68.4 9.5 97.6 27.1L813.5 844h-603z\" } }] }, \"name\": \"experiment\", \"theme\": \"outlined\" };\nexport default ExperimentOutlined;\n","// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport ExperimentOutlinedSvg from \"@ant-design/icons-svg/es/asn/ExperimentOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar ExperimentOutlined = function ExperimentOutlined(props, ref) {\n  return React.createElement(AntdIcon, Object.assign({}, props, {\n    ref: ref,\n    icon: ExperimentOutlinedSvg\n  }));\n};\n\nExperimentOutlined.displayName = 'ExperimentOutlined';\nexport default React.forwardRef(ExperimentOutlined);","import { Button, Space, notification } from 'antd';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\n\nimport { ExperimentOutlined } from '@ant-design/icons';\nimport { authContext } from '../AuthContext';\nimport { postLoginApi } from '../api';\nimport { useApi } from '../useApi';\n\nexport const demoControl = {};\n\nexport function DemoControls() {\n\n    const { user, setUser } = useContext(authContext);\n    const [open, setOpen] = useState(true);\n    const [, login] = useApi(postLoginApi, setUser);\n\n    const history = useHistory();\n    demoControl.history = history;\n    const location = useLocation();\n\n    useEffect(() => {\n        if (!open) {\n            notification.close('demo');\n            return;\n        }\n\n        notification.info({\n            key: 'demo',\n            message: 'Demo Modus',\n            duration: 0,\n            placement: 'bottomRight',\n            icon: <ExperimentOutlined />,\n            onClose: () => setOpen(false),\n            description: (\n                <>\n                    <p>Dies ist eine Demo, gefüllt mit Beispieldaten.</p>\n                    <Space direction=\"vertical\">\n                        {location.pathname === '/kiosk' ?\n                            (\n                                <Button size=\"middle\" onClick={() => history.push('/')}>\n                                    Kiosk Modus verlassen\n                                </Button>\n                            ) : (\n                                <>\n                                    <Button size=\"middle\" onClick={() => history.push('/kiosk')}>\n                                        Kiosk Modus\n                                    </Button>\n                                    {user?.userId !== 2 &&\n                                        <Button size=\"middle\" onClick={() => login(null, {\n                                            type: 'plain',\n                                            mail: 'otto@example.com',\n                                            password: 'demo',\n                                        })}>\n                                            Als Admin (Otto) anmelden\n                                        </Button>\n                                    }\n                                    {user?.userId !== 9 &&\n                                        <Button size=\"middle\" onClick={() => login(null, {\n                                            type: 'plain',\n                                            mail: 'max@example.com',\n                                            password: 'demo',\n                                        })}>\n                                            Als Nutzer (Max) anmelden\n                                        </Button>\n                                    }\n                                </>\n                            )\n                        }\n                        <Button size=\"middle\" type=\"primary\" onClick={() => setOpen(false)}>\n                            Ausblenden\n                        </Button>\n                    </Space>\n                </>\n            ),\n        });\n    }, [open, history, location, user, login]);\n\n    if (!open)\n        return (\n            <Button \n                style={{ position: 'fixed', bottom: 5, right: 5 }}\n                type=\"primary\" \n                onClick={() => setOpen(true)}\n            >\n                Demosteuerung einblenden\n            </Button>\n        );\n\n    return null;\n}","import { RESERVATION_TYPES } from '../ReservationTypes';\nimport dayjs from 'dayjs';\n\nconst today = dayjs().startOf('day');\n\nexport const db = {\n\n    config: {\n        announcement: 'Dies ist eine Beispielankündigung.\\nEine Ankündigung kann als Admin unter Verwaltung -> Allgemein eingestellt werden.',\n        visibleHours: [8, 22],\n        orgName: 'Tischtennis Club',\n        serverMail: 'abc@def.de',\n        url: 'https://reservierung.xyz.de',\n        reservationDaysInAdvance: 90,\n        reservationMaxActiveCount: 10,\n        // timeZone: 'Europe/Berlin',\n        timeZone: dayjs.tz.guess(),\n    },\n\n    mailTemplates: {\n        reservationConfirmation: {\n            subject: 'Reservierungsbestätigung - Tischtennis Club',\n            body: `Hallo {{name}}.<div><br>Sie haben soeben folgende Reservierung getätigt:<br><br>{{reservierung}}<br><br>Eine verbindliche Buchung kommt erst durch Einwurf der Wertmarke in den Wertmarkenautomaten zustande.<br>Aus dem Reservierungssystem können keine Rechtsansprüche abgeleitet werden.<br><br>Sie bekommen die Wertmarken und den Zugangscode bei unserern Partnern:<br>xyz<br><br>---</div><div><br></div><div>Tischtennis Club&nbsp;</div>`\n        },\n        reservationCancelled: {\n            subject: 'Stornierung Ihrer Reservierung - Tischtennis Club',\n            body: `Hallo {{name}}.<div><br>Ihre Reservierung wurde soeben storniert:<br><br>{{reservierung}}<br><br>Grund der Stornierung:</div><div><br></div><div>{{grund}}<br><br><br>---</div><div><br></div><div>Tischtennis Club&nbsp;</div>`\n        },\n        confirmMail: {\n            subject: 'Registrierung: Bestätigen Sie Ihre E-Mail - Tischtennis Club',\n            body: `Hallo {{name}}.<div><br>Bitte bestätigen Sie Ihre E-Mail Adresse, indem Sie auf folgenden Link klicken:<br><br>{{link}}<br></div><div><br></div><div>---</div><div><br></div><div>Tischtennis Club&nbsp;</div>`\n        },\n        resetPassword: {\n            subject: 'Passwort zurücksetzen - Tischtennis Club',\n            body: `Hallo {{name}}.<div><br>Klicken Sie auf folgenden Link, um Ihr Passwort zurückzusetzen:<br><br>{{link}}<br><br></div><div>---</div><div><br></div><div>Tischtennis Club&nbsp;</div>`\n        },\n    },\n\n    templates: {\n        reservationTos: {\n            body: `<h1>Preis</h1><div>15,- Euro pro Wertmarke<br>145,- Euro pro 10 Wertmarken<br></div><div><br></div><h1>Nutzungsordnung</h1><ul>\n    <li>\n        Zur Nutzung benötigen Sie Wertmarken und einen Zugangscode. Diese erhalten Sie bei unserern Partnern: <br>\nxyz asfdlkafsd, asdfkj 012387878 <br>\nxbasdfyz aad, asdfkj 129388 8123 <br>\n    </li>\n    <li>\n        Am Eingang der Halle ist ein Codeschloß angebracht, in das ein 4-stelliger Zahlencode eingegeben werden muß, um den Türöffner zu betätigen.\n    </li>\n    <li>\n        Auf den Plätzen befindet sich für jeden Platz ein Wertmarkenautomat. Eine Wertmarke schaltet für 1 Stunde (+ etwas Nachlauf) das Licht ein und gibt die Heizungssteuerung frei.\n    </li>\n    <li>\n        Eine Nutzung nach 22.00 und vor 8.00 Uhr ist ohne Reservierung möglich.\n    </li>\n    <li>\n        Aus dem Reservierungssystem können keine Rechtsansprüche abgeleitet werden.\n    </li>\n</ul>`\n        },\n        systemTos: {\n            body: `<ul>\n    <li>\n        Aus dem Reservierungssystem können keine Rechtsansprüche abgeleitet werden.\n    </li>\n    <li>\n        Ihr Anzeigename wird öffentlich auf dem Reservierungskalender angezeigt.\n    </li>\n    <li>\n        Sie sind damit einverstanden, dass eine zu Cookies ähnliche Technologie verwendet wird, um die Funktionalität des Systems zu gewährleisten. Es erfolgt kein Tracking, o.ä.\n    </li>\n    <li>\n        Sie können Ihre gespeicherten Daten (Benutzerkonto, Reservierungen) zu jedem Zeitpunkt einsehen und endgültig löschen.\n    </li>\n    <li>\n        Ihre E-Mail wird dazu verwendet, um Reservierungen zu bestätigen und Sie ggf. zu benachrichtigen. Ihre E-Mail wird nicht mit Dritten geteilt.\n    </li>\n</ul>`\n        },\n        infoPage: {\n            body: `<h1>Allgemeine Informationen zur Hallennutzung</h1><div><br><ul><li>Es handelt sich hier um ein Reservierungssystem und nicht um ein Buchungssystem.</li><li>Eine verbindliche Buchung kommt erst durch Einwurf der Wertmarke in den Wertmarkenautomaten zustande.</li><li>Aus dem Reservierungssystem können keine Rechtsansprüche abgeleitet werden.</li><li>Sie müssen dieses Reservierungssystem nicht nutzen. Sie können die Halle auch ohne Reservierung nutzen, bitte beachten Sie aber, daß Reservierungen Vorrang haben.</li><li>Es ist auch eine Nutzung nach 22.00 und vor 8.00 möglich. Diese Zeiten werden nur selten nachgefragt und sind deshalb wegen der Übersichtlichkeit nicht im Reservierungsplan aufgeführt.</li><li>Am Eingang der Halle ist ein Codeschloß angebracht, in das ein 4-stelliger Zahlencode eingegeben werden muß, um den Türöffner zu betätigen.</li><li>Auf den Plätzen befindet sich für jeden Platz ein Wertmarkenautomat. Eine Wertmarke schaltet für 1 Stunde (+ etwas Nachlauf) das Licht ein und gibt die Heizungssteuerung frei.</li><li>Sie bekommen die Wertmarken und den Zugangscode bei unserern Partnern:</li><li>relexa hotel Harz-Wald Braunlage, Karl-Röhrig Str. 5a, Tel. 05520/8070</li><li>BTG Braunlage (Tourist-Information), Elbingeröderstr. 17, Tel. 05520/93070</li><li>Eine Wertmarke kostet 15,- Euro</li><li>10 Wertmarken kosten 145,- Euro</li><li>Ein Abo im eigentlichen Sinn gibt es nicht, nur den Rabatt ab 10 Wertmarken.</li><li>Bei wesentlich höherem Bedarf, z.B. Buchung der ganzen Halle für ein Wochenende setzen Sie sich bitte mit uns in Verbindung.</li></ul></div><div><br></div><h1>Nutzung des Reservierungssystems</h1><div><ul><li>Neu hier?<br>Bevor sie das Reservierungssystem nutzen können, müssen sie sich registrieren.</li><li>Wie reserviere ich eine Stunde?<br>Klicken Sie die gewünschte Stunde einfach an. Falls Sie nicht angemeldet sind erscheint die Anmeldemaske. Melden Sie sich an, dann können Sie die gewünschte Stunde durch einfaches anklicken reservieren.</li><li>Wie storniere ich eine Reservierung?<br>Sie können Reservierungen einfach durch anklicken der Reservierung wieder stornieren. Sie können nur ihre eigenen Reservierungen stornieren. Sie müssen dazu angemeldet sein.</li><li>Welche Einschränkungen gibt es für Reservierungen?<br>Reservierungen können maximal 3 Monate im voraus getätigt werden.</li><li>Passwort, E-Mail oder Nutzername ändern<br>Sie können ihre Daten unter \"Mein Benutzerkonto\" ändern.</li><li>DSGVO: Daten löschen / anfordern<br>Sie können all ihre Daten unter \"Mein Benutzerkonto\" anfordern.</li></ul></div>`,\n        },\n        legalPrivacy: {\n            body: `<h1>Impressum</h1><h1>Datenschutzerklärung</h1>`,\n        },\n    },\n\n    courts: [\n        {\n            courtId: 1,\n            name: 'Platz 1',\n        },\n        {\n            courtId: 2,\n            name: 'Platz 2',\n        },\n        // {\n        //     courtId: 2,\n        //     name: 'Platz 3',\n        // }\n    ],\n\n    users: [\n        {\n            userId: 9,\n            name: 'Max Mustermann',\n            mail: 'max@example.com',\n            verified: true,\n            admin: false,\n            registeredAt: dayjs(),\n        },\n        {\n            userId: 2,\n            name: 'Otto Probiermal',\n            mail: 'otto@example.com',\n            verified: true,\n            admin: true,\n            registeredAt: dayjs(),\n        },\n        {\n            userId: 3,\n            name: 'Jürgen M.',\n            mail: 'juergen@example.com',\n            verified: true,\n            admin: false,\n            registeredAt: dayjs(),\n        },\n        {\n            userId: 8,\n            name: 'H. Müller',\n            mail: 'mueller@example.com',\n            verified: true,\n            admin: false,\n            registeredAt: dayjs(),\n        },\n        {\n            userId: 661,\n            name: 'Nick Sample',\n            mail: 'test.franz.mein.mail@franz.de',\n            verified: true,\n            admin: false,\n            registeredAt: dayjs(),\n        },\n        {\n            userId: 41,\n            name: 'Franz Test',\n            mail: 'test.franz.mein.mail@franz.de',\n            verified: false,\n            admin: false,\n            registeredAt: dayjs(),\n        }\n    ],\n\n    // primary key: id auto inc\n    // foreign key: groupId\n    reservations: [\n        {\n            id: 0,\n            from: today.add(-1, 'day').hour(11),\n            to: today.add(+3, 'day').hour(20),\n            courtId: 2,\n            groupId: 0,\n            created: today.add(-2, 'day').hour(11),\n        },\n        {\n            id: 1,\n            from: today.add(-1, 'day').hour(11),\n            to: today.add(-1, 'day').hour(12),\n            courtId: 1,\n            groupId: 1,\n            created: today.add(-2, 'day').hour(11),\n        },\n        {\n            id: 2,\n            from: today.add(3, 'day').hour(20),\n            to: today.add(3, 'day').hour(21),\n            courtId: 1,\n            groupId: 3,\n            created: today.add(-2, 'day').hour(11),\n        },\n        {\n            id: 3,\n            from: today.add(-2, 'day').hour(15),\n            to: today.add(-2, 'day').hour(16),\n            courtId: 1,\n            groupId: 2,\n            created: today.add(-4, 'day').hour(11),\n        },\n        {\n            id: 4,\n            from: today.add(-1, 'day').hour(15),\n            to: today.add(-1, 'day').hour(16),\n            courtId: 1,\n            groupId: 2,\n            created: today.add(-4, 'day').hour(11),\n        },\n        {\n            id: 5,\n            from: today.add(-0, 'day').hour(15),\n            to: today.add(-0, 'day').hour(16),\n            courtId: 1,\n            groupId: 2,\n            created: today.add(-4, 'day').hour(11),\n        },\n        {\n            id: 6,\n            from: today.add(1, 'day').hour(15),\n            to: today.add(1, 'day').hour(16),\n            courtId: 1,\n            groupId: 2,\n            created: today.add(-4, 'day').hour(11),\n        },\n        {\n            id: 7,\n            from: today.add(0, 'day').hour(17),\n            to: today.add(0, 'day').hour(18),\n            courtId: 1,\n            groupId: 4,\n            created: today.add(-4, 'day').hour(11),\n        },\n        {\n            id: 8,\n            from: today.add(7, 'day').hour(17),\n            to: today.add(7, 'day').hour(18),\n            courtId: 1,\n            groupId: 4,\n            created: today.add(-4, 'day').hour(11),\n        },\n        {\n            id: 9,\n            from: today.add(14, 'day').hour(17),\n            to: today.add(14, 'day').hour(18),\n            courtId: 1,\n            groupId: 4,\n            created: today.add(-4, 'day').hour(11),\n        },\n        {\n            id: 10,\n            from: today.add(21, 'day').hour(17),\n            to: today.add(21, 'day').hour(18),\n            courtId: 1,\n            groupId: 4,\n            created: today.add(-4, 'day').hour(11),\n        },\n    ],\n\n    // primary key: groupId auto_inc\n    reservationGroups: [\n        {\n            groupId: 0,\n            userId: null,\n            text: \"Pflegearbeiten\",\n            type: RESERVATION_TYPES.DISABLE,\n        },\n        {\n            groupId: 1,\n            userId: 9,\n            text: null,\n            type: RESERVATION_TYPES.NORMAL,\n        },\n        {\n            groupId: 3,\n            userId: 9,\n            text: null,\n            type: RESERVATION_TYPES.NORMAL,\n        },\n        {\n            groupId: 2,\n            userId: 3,\n            text: null,\n            type: RESERVATION_TYPES.NORMAL,\n        },\n        {\n            groupId: 4,\n            userId: 2,\n            text: null,\n            type: RESERVATION_TYPES.NORMAL,\n        },\n    ]\n};\n\nwindow.getFakeDb = () => {\n    return db;\n};\n\nwindow.addFakeReservation = () => {\n    db.reservationGroups.push({\n        groupId: 999,\n        userId: 2,\n        text: 'Fake',\n        type: RESERVATION_TYPES.NORMAL,\n    });\n\n    db.reservations.push({\n        from: today.hour(8),\n        to: today.hour(9),\n        courtId: 1,\n        groupId: 999,\n        created: today,\n    });\n}\n","import { Button, notification } from 'antd';\nimport { deleteUserApi, getBaseDataApi, getMailTemplatesApi, getReservationsApi, getUsersApi, patchConfigApi, patchReservationGroupApi, patchUserApi, postLoginApi, postLogoutApi, postRegisterApi, postReservationGroupApi, postSendVerifyMailApi, postVerifyMailApi, putCourtsApi, putMailTemplateApi, putTemplateApi } from '../api';\nimport { parseQuery, reservationOverlap } from '../helper';\n\nimport { RESERVATION_TYPES } from '../ReservationTypes';\nimport dayjs from 'dayjs';\nimport { db } from './mockDatabase';\nimport { demoControl } from './DemoControls';\n\nconst fakeDelay = (ms) => new Promise(resolve => setTimeout(resolve, ms));\n\nconst cn = ({ url, method }) => {\n    let u = method || 'GET';\n    const di = url.indexOf(':');\n    return u + (di !== -1 ? url.slice(0, di) : url);\n};\n\nasync function handleRequests(url, options) {\n    const body = options.body ? JSON.parse(options.body) : null;\n\n    const queryIndex = url.indexOf('?');\n    const cleanUrl = queryIndex !== -1 ? url.slice(0, queryIndex) : url;\n    const params = parseQuery(url.slice(queryIndex));\n\n    const lastSlashIndex = cleanUrl.lastIndexOf('/');\n    const firstUrlPart = cleanUrl.slice(0, lastSlashIndex + 1);\n    const lastUrlPart = cleanUrl.slice(lastSlashIndex + 1);\n\n    let authUserId = options.headers?.[\"Authorization\"]?.split('.')[1];\n    authUserId = authUserId && parseInt(authUserId);\n\n    const tryStrings = [\n        `${options.method}${cleanUrl}`,\n        `${options.method}${firstUrlPart}`,\n    ];\n\n    for (let s of tryStrings) {\n        switch (s) {\n            case cn(getBaseDataApi):\n                return {\n                    config: db.config,\n                    courts: db.courts,\n                    templates: db.templates,\n                };\n\n            case cn(patchConfigApi):\n                db.config = {\n                    ...db.config,\n                    ...body,\n                };\n                return { success: true };\n\n            case cn(putCourtsApi):\n                db.courts = body;\n                return { success: true };\n\n            case cn(getMailTemplatesApi):\n                return db.mailTemplates;\n\n            case cn(putMailTemplateApi):\n                db.mailTemplates = {\n                    ...db.mailTemplates,\n                    [body.id]: body,\n                };\n                return { success: true };\n\n            case cn(putTemplateApi):\n                db.templates = {\n                    ...db.templates,\n                    [body.id]: body,\n                };\n                return { success: true };\n\n            case cn(getUsersApi):\n                return db.users.map(user => ({\n                    ...user,\n                    upcomingReservationCount: 123,\n                    totalReservationCount: 1234,\n                    lastActivity: dayjs(),\n                }));\n\n            case cn(patchUserApi):\n                db.users = db.users.map(u => {\n                    if (u.userId === body.userId)\n                        return {\n                            ...u,\n                            ...body,\n                            verified: (!body.mail || u.mail === body.mail)\n                                ? u.verified : false,\n                        };\n                    return u;\n                });\n                return { success: true };\n\n            case cn(postRegisterApi):\n                if (db.users.some(u => u.mail === body.mail))\n                    return {\n                        __status: 400,\n                        json: { message: 'mail already registered' }\n                    };\n                const newUser = {\n                    name: body.name,\n                    mail: body.mail,\n                    password: 'hashedPw',\n                    userId: Math.floor(Math.random() * Number.MAX_SAFE_INTEGER),\n                    verified: false,\n                    admin: false,\n                    registeredAt: dayjs(),\n                };\n                db.users.push(newUser);\n                return {\n                    token: `demo-token.${newUser.userId}`,\n                    userId: newUser.userId,\n                    name: newUser.name,\n                    mail: newUser.mail,\n                    verified: newUser.verified,\n                    admin: newUser.admin,\n                };\n\n            case cn(postLoginApi): {\n                // await fakeDelay(800);\n                const { type, token, mail, /* password */ } = body;\n                let user;\n                if (type === 'token') {\n                    const userId = parseInt(token.split('.')[1]);\n                    user = db.users.find(u => u.userId === userId);\n                } else {\n                    // ignore password in demo\n                    user = db.users.find(u => u.mail === mail);\n                }\n                if (!user)\n                    return {\n                        __status: 401,\n                        json: { message: 'wrong login' }\n                    };\n                return {\n                    token: `demo-token.${user.userId}`,\n                    userId: user.userId,\n                    name: user.name,\n                    mail: user.mail,\n                    verified: user.verified,\n                    admin: user.admin,\n                };\n            }\n\n            case cn(postLogoutApi):\n                return { success: true };\n\n            case cn(deleteUserApi):\n                db.users = db.users.filter(u => u.userId !== body.userId);\n                return { success: true };\n\n            case cn(postSendVerifyMailApi): {\n                const verifyToken = btoa(body.mail);\n                notification.warn({\n                    key: 'fake-verification',\n                    message: 'Demo E-Mail Verifikation',\n                    duration: 0,\n                    placement: 'bottomRight',\n                    description: (\n                        <div>\n                            <p>Dies simuliert den Verifikationsprozess für <strong>{body.mail}</strong>.</p>\n                            <Button onClick={() => {\n                                demoControl.history?.push(`/verify-mail/${verifyToken}`);\n                                notification.close('fake-verification');\n                            }}>\n                                E-Mail Verifizieren (Demo)\n                        </Button>\n                        </div>\n                    ),\n                });\n                return { success: true };\n            }\n\n            case cn(postVerifyMailApi): {\n                const mail = atob(body.token);\n                const user = db.users.find(u => u.mail === mail);\n                if (!user)\n                    return {\n                        __status: 404,\n                        json: { message: 'user not found' }\n                    };\n                user.verified = true;\n                return { success: true };\n            }\n\n            case cn(getReservationsApi): {\n                const start = params.start && dayjs(params.start);\n                const end = params.end && dayjs(params.end);\n                const groupId = params['group-id'] && parseInt(params['group-id']);\n                const userId = params['user-id'] && parseInt(params['user-id']);\n                const reservations = [];\n\n                const checkDate = ({ from, to }) => {\n                    let check = true;\n                    if (start)\n                        check = check && start.isSameOrBefore(to);\n                    if (end)\n                        check = check && end.isSameOrAfter(from);\n                    return check;\n                };\n\n                const checkGroupId = (gId) => {\n                    if (groupId)\n                        return groupId === gId;\n                    return true;\n                };\n\n                const checkUserId = (uId) => {\n                    if (userId)\n                        return userId === uId;\n                    return true;\n                };\n\n                db.reservations.forEach(r => {\n                    if (checkDate(r)) {\n                        db.reservationGroups.forEach(g => {\n                            if (g.groupId === r.groupId && checkGroupId(g.groupId)) {\n                                const user = db.users.find(u => g.userId === u.userId);\n                                if (checkUserId(user?.userId))\n                                    reservations.push({\n                                        ...r,\n                                        ...g,\n                                        name: user?.name || undefined,\n                                        created: undefined,\n                                    });\n                            }\n                        });\n                    }\n                });\n                return reservations;\n            }\n\n            // case cn(deleteReservationGroupApi):\n            case cn(patchReservationGroupApi):\n            case cn(postReservationGroupApi): {\n                // TODO ensure that user is admin if reservation.type = DISABLE\n                let groupId;\n                try {\n                    groupId = parseInt(lastUrlPart);\n                    if (isNaN(groupId))\n                        groupId = null;\n                } catch (e) { }\n                groupId = groupId ?? (db.reservationGroups.reduce((nextId, g) => {\n                    return Math.max(nextId, g.groupId);\n                }, 0) + 1);\n                const text = body?.text;\n                // todo real server: check if from,to are set\n                const reservations = body?.reservations?.map(({ courtId, from, to }) => ({\n                    courtId,\n                    from: dayjs(from),\n                    to: dayjs(to),\n                }));\n\n                if (!reservations?.length) {\n                    // same as delete all\n                    db.reservationGroups = db.reservationGroups.filter(g => g.groupId !== groupId);\n                    db.reservations = db.reservations.filter(r => r.groupId !== groupId);\n                } else {\n                    const group = db.reservationGroups.find(g => g.groupId === groupId);\n                    if (text && group) // group is null if post\n                        group.text = text;\n                    \n                    const { groupReservations, rest } = db.reservations.reduce((acc, r) => {\n                        if (r.groupId === groupId)\n                            acc.groupReservations.push(r);\n                        else\n                            acc.rest.push(r);\n                        return acc;\n                    }, { groupReservations: [], rest: [] });\n\n                    let { keepReservations, newReservations } = reservations.reduce((acc, { courtId, from, to }) => {\n                        const found = groupReservations.find(r =>\n                            r.from.isSame(from, 'hour') \n                            && r.to.isSame(to, 'hour')\n                            && r.courtId === courtId\n                        );\n                        if (found)\n                            acc.keepReservations.push(found);\n                        else\n                            acc.newReservations.push({\n                                from,\n                                to,\n                                courtId,\n                                groupId,\n                                created: dayjs(),\n                            });\n                        return acc;\n                    }, { keepReservations: [...rest], newReservations: [] });\n\n                    const userId = group?.userId || authUserId;\n                    const user = db.users.find(u => u.userId === userId);\n\n                    const today = dayjs();\n                    const maxDate = today.add(db.config.reservationDaysInAdvance, 'day');\n                    let { conflicts, unavailableReservations } = newReservations.reduce((acc, r) => {\n                        const allFound = keepReservations.filter(r2 => reservationOverlap(r, r2));\n                        if (allFound.length) {\n                            acc.conflicts.push(...allFound);\n                            acc.unavailableReservations.push(r);\n                        } else if ((!user.admin && r.to.isAfter(maxDate, 'day'))\n                            || (!user.admin && r.from.isBefore(today, 'hour'))) {\n                            acc.unavailableReservations.push(r);\n                        }\n                        return acc;\n                    }, { conflicts: [], unavailableReservations: [] });\n\n                    const type = body?.type || group.type;\n                    if (type === RESERVATION_TYPES.DISABLE) {\n                        // delete \n                        const { normal, disabled } = conflicts.reduce((acc, r) => {\n                            const group = db.reservationGroups.find(g => g.groupId === r.groupId);\n                            if (group.type === RESERVATION_TYPES.DISABLE)\n                                acc.disabled.push(r);\n                            else\n                                acc.normal.push(r);\n                            return acc;\n                        }, { normal: [], disabled: [] });\n                        \n                        if (disabled.length) \n                            return {\n                                __status: 409,\n                                json: { unavailableReservations: disabled }\n                            };\n                        \n                        // todo delete empty groups\n                        if (normal.length)\n                            keepReservations = keepReservations.filter(k => !normal.some(n => \n                                n.from.isSame(k.from, 'hour') \n                                && n.to.isSame(k.to, 'hour') \n                                && n.courtId === k.courtId));\n                        \n                    } else if (unavailableReservations.length > 0) {\n                        return {\n                            __status: 409,\n                            json: { unavailableReservations }\n                        };\n                    }\n\n                    const updatedReservations = [\n                        ...keepReservations,\n                        ...newReservations,\n                    ];\n\n                    if (!user.admin) {\n                        // count user reservations\n                        const userGroupIds = [\n                            groupId,\n                            ...db.reservationGroups\n                                .filter(g => g.userId === userId)\n                                .map(g => g.groupId)\n                        ];\n                        const resCount = updatedReservations.reduce((acc, r) => {\n                            if (userGroupIds.includes(r.groupId) && r.from.isSameOrAfter(today, 'hour'))\n                                return acc + 1;\n                            return acc;\n                        }, 0);\n\n                        if (resCount > db.config.reservationMaxActiveCount)\n                            return {\n                                __status: 403,\n                                json: {\n                                    message: 'too many active reservations',\n                                    value: resCount,\n                                    max: db.config.reservationMaxActiveCount,\n                                }\n                            };\n                    }\n\n                    db.reservations = updatedReservations;\n\n                    // new reservation ~ post\n                    if (!groupReservations.length) {\n                        const group = {\n                            groupId,\n                            text,\n                            type: body?.type || RESERVATION_TYPES.NORMAL,\n                            userId,\n                        };\n                        db.reservationGroups.push(group);\n\n                        return newReservations.map(r => ({\n                            ...r,\n                            ...group,\n                            name: user.name,\n                            created: undefined,\n                        }));\n                    }\n                }\n\n                return { success: true };\n            }\n\n            default:\n        }\n    }\n\n    return null;\n}\n\nfunction byteLen(x) {\n    const str = typeof x === 'string' ? x : JSON.stringify(x);\n    const m = encodeURIComponent(str).match(/%[89ABab]/g);\n    return str.length + (m ? m.length : 0);\n}\n\nexport function patchFetch() {\n    const _fetch = window.fetch;\n\n    window.fetch = async (url, options) => {\n\n        await fakeDelay(200);\n\n        let res;\n        try {\n            res = await handleRequests(url, options || {});\n        } catch (err) {\n            console.log(err);\n            res = {\n                __status: 500,\n                json: { error: true },\n            };\n        }\n\n        console.log(\"Fake API:\", {\n            request: { url, options },\n            response: res,\n            db,\n            totalKb: byteLen({ res, }) / 1024,\n        });\n\n        if (res?.__status) {\n            return Promise.resolve({\n                ok: false,\n                status: res.__status,\n                json: async () => Promise.resolve(JSON.parse(JSON.stringify(res.json))),\n            });\n        } else if (res) {\n            return Promise.resolve({\n                ok: true,\n                json: async () => Promise.resolve(JSON.parse(JSON.stringify(res))),\n            });\n        }\n\n        return _fetch(url, options);\n    };\n}"],"sourceRoot":""}